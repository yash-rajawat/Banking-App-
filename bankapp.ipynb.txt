{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "\n",
    "class BankAccount:\n",
    "    def __init__(self, account_number, account_holder, initial_balance=0):\n",
    "        self.account_number = account_number\n",
    "        self.account_holder = account_holder\n",
    "        self.balance = initial_balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        if amount > 0:\n",
    "            self.balance += amount\n",
    "            l4.config(text=f\"Deposited ${amount}. New balance: ${self.balance}\")\n",
    "        else:\n",
    "            l4.config(text=\"Invalid deposit amount. Please enter a positive number.\")\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > 0 and amount <= self.balance:\n",
    "            self.balance -= amount\n",
    "            l5.config(text=f\"Withdrew ${amount}. New balance: ${self.balance}\")\n",
    "        elif amount <= 0:\n",
    "            l5.config(text=\"Invalid withdrawal amount. Please enter a positive number.\")\n",
    "        else:\n",
    "            l5.config(text=\"Insufficient funds.\")\n",
    "\n",
    "    def check_balance(self):\n",
    "        l5.config(text=f\"Account balance for {self.account_holder}: ${self.balance}\")\n",
    "\n",
    "def register_account():\n",
    "    account_number = t1.get()\n",
    "    username = t2.get()\n",
    "    initial_balance = float(t3.get())\n",
    "    # Create a new bank account for the user and store it in a dictionary with the account number as the key.\n",
    "    accounts[account_number] = BankAccount(account_number, username, initial_balance)\n",
    "    l4.config(text=f\"Account for {username} registered with an initial balance of ${initial_balance}.\")\n",
    "\n",
    "def view_balance():\n",
    "    # Retrieve the account for the current account number and display their balance.\n",
    "    account_number = t1.get()\n",
    "    account = accounts.get(account_number)\n",
    "    if account:\n",
    "        account.check_balance()\n",
    "    else:\n",
    "        l5.config(text=\"Account not found.\")\n",
    "\n",
    "def deposit_money():\n",
    "    account_number = t1.get()\n",
    "    account = accounts.get(account_number)\n",
    "    if account:\n",
    "        amount = float(t3.get())  # Use t3 for the deposit amount\n",
    "        account.deposit(amount)\n",
    "    else:\n",
    "        l4.config(text=\"Account not found.\")\n",
    "\n",
    "def withdraw_money():\n",
    "    account_number = t1.get()\n",
    "    account = accounts.get(account_number)\n",
    "    if account:\n",
    "        amount = float(t3.get())  # Use t3 for the withdrawal amount\n",
    "        account.withdraw(amount)\n",
    "    else:\n",
    "        l4.config(text=\"Account not found.\")\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Simple Bank System\")\n",
    "root.geometry('350x200')\n",
    "\n",
    "accounts = {}  # Dictionary to store user accounts\n",
    "\n",
    "l1 = tk.Label(root, text=\"Account Number\")\n",
    "l2 = tk.Label(root, text=\"User Name\")\n",
    "l3 = tk.Label(root, text=\"Amount\")\n",
    "\n",
    "t1 = tk.Entry(root)\n",
    "t2 = tk.Entry(root)\n",
    "t3 = tk.Entry(root)\n",
    "\n",
    "b1 = tk.Button(root, text=\"Registration\", command=register_account)\n",
    "b2 = tk.Button(root, text=\"View Balance\", command=view_balance)\n",
    "b3 = tk.Button(root, text=\"Deposit\", command=deposit_money)\n",
    "b4 = tk.Button(root, text=\"Withdraw\", command=withdraw_money)\n",
    "\n",
    "l1.grid(row=0, column=0)\n",
    "l2.grid(row=1, column=0)\n",
    "l3.grid(row=2, column=0)\n",
    "\n",
    "t1.grid(row=0, column=1)\n",
    "t2.grid(row=1, column=1)\n",
    "t3.grid(row=2, column=1)\n",
    "\n",
    "b1.grid(row=3, column=1)\n",
    "b2.grid(row=4, column=1)\n",
    "b3.grid(row=5, column=1)\n",
    "b4.grid(row=6, column=1)\n",
    "\n",
    "l4 = tk.Label(root, text=\"\", fg=\"green\")\n",
    "l4.grid(row=7, column=1)\n",
    "\n",
    "l5 = tk.Label(root, text=\"\", fg=\"blue\")\n",
    "l5.grid(row=8, column=1)\n",
    "\n",
    "tk.mainloop()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0rc1"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
